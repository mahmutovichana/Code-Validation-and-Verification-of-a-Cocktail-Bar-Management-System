@model IEnumerable<SmartCafe.Models.Drink>
@using Microsoft.AspNetCore.Identity
@inject SignInManager<IdentityUser> SignInManager
@inject UserManager<IdentityUser> UserManager

@{
    ViewData["Title"] = "Index";
    Layout = null;
}

<style>

    @@import url('https://fonts.googleapis.com/css2?family=Montserrat&display=swap');

    /* Stilovi za header */
    body {
        font-family: 'Montserrat', sans-serif;
        margin: 0;
        padding: 0;
        background-color: #0C356A;
        /*background-image: url('/images/abstractBackground2.png');*/
        color: white;
    }

    .header {
        background-color: transparent;
        color: white;
        padding: 0px 10px;
        display: flex;
        justify-content: space-between;
        align-items: center;
        margin-right: 20px;
    }

    .nav {
        list-style-type: none !important;
        display: flex;
        align-items: center;
    }

        .nav li {
            margin-right: 35px;
            margin-top: -50px;
            text-transform: uppercase;
            font-size: 14px;
            list-style-type: none;
        }

        .nav a {
            color: white;
            text-decoration: none;
            padding-bottom: 3px;
            border-bottom: 2px solid transparent;
            transition: border-bottom-color 0.3s;
            list-style-type: none;
        }

            .nav a:hover {
                border-bottom-color: #fff;
                list-style-type: none;
            }

    .nav-item {
        list-style-type: none;
    }

    .logo img {
        max-width: 35%;
        margin-right: 0px;
        margin-left: 15px;
        margin-top: -20px;
    }

    /* Stilovi za statistiku */
    .statistics {
        display: grid;
        grid-template-columns: repeat(2, 1fr);
        grid-gap: 20px;
        margin-top: 20px;
        margin-left: 20%;
        margin-right: 20%;
        justify-content: center; /* Add this line to center-align the content */
    }



    .statistics-item {
        display: flex;
        flex-direction: column;
        align-items: center;
        text-align: center;
        background-color: rgba(0, 0, 0, 0.5);
        padding: 20px;
        border-radius: 5px;
        color: white;
        transition: background-color 0.3s;
    }

        .statistics-item:hover {
            background-color: rgba(0, 0, 0, 0.7);
        }

    .statistics-label {
        font-size: 18px;
        font-weight: bold;
        margin-bottom: 10px;
    }

    .statistics-value {
        font-size: 24px;
        font-weight: bold;
        margin-bottom: 10px;
    }

    .statistics-description {
        grid-column: span 2;
        text-align: center;
        margin-top: 40px;
        color: white;
    }

        .statistics-description h2 {
            font-size: 32px;
            margin-bottom: 10px;
        }

        .statistics-description p {
            font-size: 16px;
        }

    #happyHour {
        grid-column-start: 1;
        grid-column-end: 2;
    }


    /* Stilovi za carousel */
    .carousel {
        display: grid;
        grid-template-columns: repeat(4, 1fr);
        grid-gap: 40px;
        margin: 15%;
        margin-top: 0;
        margin-bottom: 40px;
    }

    .carousel-item {
        display: flex;
        width: fit-content;
        flex-direction: column;
        align-items: center;
        text-align: center;
        background-color: #f5f5f5;
        padding: 10px;
        margin: 2% auto;
        border-radius: 5px;
        transition: background-color 0.3s;
        cursor: pointer;
        text-decoration: none;
        color: black;
    }

        .carousel-item:hover {
            background-color: #e0e0e0;
        }

    .carousel-image, .image-container-recommended {
        width: 200px;
        max-width: 100%;
        height: 200px;
        object-fit: cover;
        border-radius: 5px;
    }

    /* Stilovi za modalni prozor */
    .modal {
        display: none; /* Inicijalno sakriven */
        position: fixed;
        z-index: 1;
        left: 0;
        top: 0;
        width: 100%;
        height: 100%;
        overflow: auto;
        background-color: rgba(0, 0, 0, 0.4); /* Polu transparentna pozadina */
    }

    .modal-content {
        background-color: #fefefe;
        margin: 15% auto;
        padding: 20px;
        border: 1px solid #888;
        width: 80%;
        max-width: 600px;
        border-radius: 5px;
        position: relative;
        display: flex;
    }

    .edit-image {
        max-width: 40%;
        height: auto;
        border-radius: 10px;
        margin-right: 20px;
    }

    .edit-details {
        display: flex;
        flex-direction: column;
        justify-content: center;
    }

    .close {
        color: #aaa;
        position: absolute;
        top: 10px;
        right: 20px;
        font-size: 28px;
        font-weight: bold;
        cursor: pointer;
    }

        .close:hover,
        .close:focus {
            color: black;
            text-decoration: none;
            cursor: pointer;
        }

    .modal h1 {
        margin-top: 0;
    }

    .modal form {
        margin-top: 20px;
    }

    .form-group {
        margin-bottom: 20px;
    }

        .form-group label {
            display: block;
            font-weight: bold;
            margin-bottom: 5px;
        }

        .form-group input[type="text"],
        .form-group input[type="number"] {
            width: 100%;
            padding: 5px;
            font-size: 16px;
            border-radius: 5px;
            border: 1px solid #ccc;
        }

        .form-group input[type="submit"] {
            background-color: #4CAF50;
            color: white;
            padding: 10px 20px;
            font-size: 16px;
            border-radius: 5px;
            border: none;
            cursor: pointer;
        }

            .form-group input[type="submit"]:hover {
                background-color: #45a049;
            }

    /* Team Members */
    .team-grid {
        display: grid;
        grid-template-columns: repeat(4, 1fr);
        gap: 10px;
        justify-content: center;
        align-items: center;
        margin-bottom: 7%;
    }

    .team-member {
        display: flex;
        flex-direction: column;
        justify-content: center;
        align-items: center;
        width: 150px;
        margin: 0 auto;
        box-sizing: border-box;
        padding: 10px;
    }

    .team-heading {
        font-size: 24px;
        font-weight: bold;
        margin-bottom: 10px;
        color: white;
        text-align: center;
        margin-top: 30px;
    }

    .team-member {
        display: flex;
        flex-direction: column;
        align-items: center;
        text-align: center;
        width: 200px;
    }

        .team-member img {
            width: 150px;
            height: 150px;
            object-fit: cover;
            border-radius: 50%;
            border: 3px solid #fff;
            box-shadow: 0px 2px 6px rgba(0, 0, 0, 0.4);
            transition: all 0.3s ease-in-out;
        }

            .team-member img:hover {
                transform: scale(1.1);
            }

    .member-job {
        font-size: 12px;
        margin-top: 2px;
        color: #ffcc33;
    }

    .member-name {
        text-transform: uppercase;
        font-weight: bold;
        color: #fff;
        margin-top: 5px;
    }

    .search-container {
        height: 100vh;
        font-family: 'Montserrat', sans-serif;
    }

    #searchInputIngredient, #searchInputName {
        display: block;
        margin: 3% auto 2% auto;
        padding: 10px;
        border-radius: 5px;
        border: 1px solid #ccc;
        width: 500px;
        font-family: 'Montserrat', sans-serif;
    }

    .quantity {
        display: flex;
        align-items: center;
        justify-content: center;
        margin-top: 10px;
    }

        .quantity button {
            width: 30px;
            height: 30px;
            background-color: #fff;
            border: none;
            color: #000;
            font-size: 16px;
            cursor: pointer;
            outline: none;
        }

        .quantity input {
            width: 40px;
            height: 30px;
            text-align: center;
            font-size: 16px;
            border: none;
            outline: none;
        }

    .dailyProfit {
        display: flex;
        flex-direction: column;
        align-items: center;
        margin-top: 20px;
        position: relative;
    }

    .box {
        display: flex;
        flex-direction: column;
        align-items: center;
        background-color: rgba(0, 0, 0, 0.5);
        padding: 20px;
        border-radius: 5px;
        color: white;
        transition: background-color 0.3s;
        width: fit-content;
        margin-bottom: 30px;
    }

    #daily-profit-btn {
        font-family: 'Montserrat';
        background-color: #4CAF50; /* Green */
        border: none;
        color: white;
        padding: 15px 32px;
        text-align: center;
        text-decoration: none;
        display: inline-block;
        font-size: 16px;
        margin-bottom: 10px;
        cursor: pointer;
        border-radius: 5px;
    }

        #daily-profit-btn:hover {
            background-color: #45a049;
        }

    #daily-profit-label {
        display: none;
        font-size: 18px;
        font-weight: bold;
        text-align: center;
    }

    .subtitle {
        font-size: 24px;
        font-weight: bold;
        margin-bottom: 10px;
    }

    .daily-profit-value {
        font-size: 36px;
        font-weight: bold;
        margin-bottom: 10px;
    }
</style>

<!DOCTYPE html>
<html>
<head>
    <title>Lagoon's Cocktail Bar - Admin Panel</title>
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/5.15.3/css/all.min.css">
</head>
<body>
    <div class="header">
        <div class="logo">
            <img src="~/images/lagoonLogoWhiteTransparent.png" alt="Logo">
        </div>
        <ul class="navbar-nav">
            <h1 style="margin-right:2px;">Admin Panel</h1>
        </ul>
    </div>

    <div class="statistics">
        <div class="statistics-description">
            <h2>Lagoon Bar Stats</h2>
            <p>Welcome to the Lagoon Bar Stats section, where you can check out some key metrics related to the performance of our bar.</p>
        </div>
        <div class="statistics-item">
            <span class="statistics-label">Number of drinks</span>
            <span class="statistics-value" id="numDrinksValue">@ViewBag.NumberOfDrinks</span>
        </div>
        <div class="statistics-item">
            <span class="statistics-label">Number of customers</span>
            <span class="statistics-value" id="numCustomersValue">4185</span>
        </div>
        <div class="statistics-item">
            <span class="statistics-label">Most expensive drink</span>
            <span class="statistics-value" id="mostExpensiveDrinkValue">@ViewBag.MostExpensiveDrink.name</span>
        </div>
        <div class="statistics-item">
            <span class="statistics-label">Cheapest drink</span>
            <span class="statistics-value" id="cheapestDrinkValue">@ViewBag.CheapestDrink.name</span>
        </div>
    </div>

    <div class="statistics" id="happyHour">
        <div class="statistics-item">
            <span class="statistics-label">Happy Hour Discount</span>
            <span class="statistics-value" id="happyHourDiscount">
                @if (ViewBag.IsHappyHour)
                {
                    <text>Currently, there is a 20% discount during Happy Hour (8 PM - 10 PM).</text>
                }
                else
                {
                    <text>No current Happy Hour discount available.</text>
                }
            </span>
        </div>
    </div>


    <style>
        .ingredient-grid {
            display: grid;
            grid-template-columns: repeat(auto-fill, minmax(200px, 1fr));
            gap: 20px;
            padding: 20px;
            align-items: center;
        }

        .ingredient-item {
            background-color: rgba(0, 0, 0, 0.7);
            border-radius: 10px;
            padding: 20px;
            display: flex;
            flex-direction: column;
            align-items: center;
            text-align: center;
            color: white;
        }

            .ingredient-item img {
                width: 100px;
                height: 100px;
                object-fit: cover;
                border-radius: 50%;
            }

        .ingredient-name {
            font-size: 14px;
            font-weight: bold;
            margin: 10px 0;
        }

        .ingredient-quantity {
            font-size: 20px;
            font-weight: bold;
        }

        .red-bg {
            background-color: #FF8080;
        }

        .yellow-bg {
            background-color: #FFCF96;
        }

        .green-bg {
            background-color: #99B080;
        }

        h2 {
            color: white;
            margin: 7%;
        }

        #availableIngredients, #recommendedDrinks {
            color: white;
            margin: 5% 0 1% 5%;
        }
    </style>

    <h3 id="availableIngredients">Available Ingredients</h3>
    <div class="ingredient-grid">
        @foreach (var ingredient in ViewBag.SortedIngredients)
        {
            <div class="ingredient-item @GetColor(ingredient.quantity)">
                <img src="@Url.Content($"~/images/ingredients/{ingredient.name}.jpg")" alt="Ingredient Image">
                <div class="ingredient-name">@ingredient.name</div>
                <div class="ingredient-quantity">@ingredient.quantity</div>
            </div>
        }
    </div>

    @functions {
        public string GetColor(int quantity)
        {
            if (quantity < 5)
            {
                return "red-bg";
            }
            else if (quantity >= 5 && quantity <= 10)
            {
                return "yellow-bg";
            }
            else
            {
                return "green-bg";
            }
        }
    }

    <style>
        .carouselRecommendedDrinks {
            display: grid;
            grid-template-columns: repeat(auto-fill, minmax(220px, 1fr));
            gap: 5px;
            padding: 20px;
            align-items: center;
            margin: 15%;
            margin-top: 0;
            margin-bottom: 40px;
        }

        #recommendedDrinks {
            color: white;
            display: block;
            margin-left: 42%;
            font-weight: bold;
            font-size: 28px;
        }
    </style>

    <h3 id="recommendedDrinks"> Recommended drinks </h3>
    <div class="carouselRecommendedDrinks">
        @foreach (var drink in ViewBag.WantedDrinks)
        {
            <div class="carousel-item">
                <div class="image-container-recommended">
                    <img src="@Url.Content("~/images/" + drink.name + ".jpg")" alt="@drink.name" class="carousel-image" />
                </div>
                <h3>@drink.name</h3>
            </div>
        }
    </div>


    <script>
        function animateValue(element, start, end, duration) {
          const range = end - start;
          const increment = end > start ? 1 : -1;
          const stepTime = Math.abs(Math.floor(duration / range));
          const obj = element;

          let current = start;

          const timer = setInterval(() => {
            current += increment;
            obj.textContent = current;
            if ((increment > 0 && current >= end) || (increment < 0 && current <= end)) {
              clearInterval(timer);
              obj.textContent = end;
            }
          }, stepTime);
        }

        const numDrinksValue = document.getElementById('numDrinksValue');
        animateValue(numDrinksValue, 0, @ViewBag.NumberOfDrinks, 2000); // Trajanje animacije je 2000ms (2 sekunde)

        const numCustomersValue = document.getElementById('numCustomersValue');
        animateValue(numCustomersValue, 0, 4185, 2000); // Trajanje animacije je 2000ms (2 sekunde)

    </script>

    <div>
        <input type="text" id="searchInputName" onkeyup="filterDrinksByName()" placeholder="Search for drinks by name..">
    </div>

    <script>
        function filterDrinksByName() {
            var input, filter, carousel, drinkItems, name, i, txtValue;
            input = document.getElementById('searchInputName');
            filter = input.value.toUpperCase();
            carousel = document.getElementsByClassName('carousel')[0];
            drinkItems = carousel.getElementsByClassName('carousel-item');
            for (i = 0; i < drinkItems.length; i++) {
                name = drinkItems[i].getElementsByTagName('h3')[0];
                txtValue = name.textContent || name.innerText;
                if (txtValue.toUpperCase().indexOf(filter) > -1) {
                    drinkItems[i].style.display = '';
                } else {
                    drinkItems[i].style.display = 'none';
                }
            }
        }
    </script>

    <div>
        <input type="text" id="searchInputIngredient" onkeyup="filterDrinksByIngredients()" placeholder="Search for drinks by ingredients..">
    </div>

    <ul id="searchResults" hidden></ul>

    <script>
        function filterDrinksByIngredients() {
            var input, filter, carousel, drinkItems, url, name, txtValue;
            input = document.getElementById('searchInputIngredient');
            filter = input.value.toUpperCase();
            carousel = document.getElementsByClassName('carousel')[0];
            drinkItems = carousel.getElementsByClassName('carousel-item');

            var url = '@Url.Action("SearchDrinksByIngredient", "AdminPanel")';
            fetch(`${url}?searchTerm=${filter}`)
                .then(response => response.json())
                .then(data => {
                    // Clear previous search results
                    carousel = document.querySelector('.carousel');
                    drinkItems = carousel.querySelectorAll('.carousel-item');

                    // Populate the search results
                    var ul = document.getElementById('searchResults');
                    ul.innerHTML = '';
                    // Show all carousel items if the search input is empty
                    if (filter === '') {
                        for (var i = 0; i < drinkItems.length; i++) {
                            drinkItems[i].style.display = 'block';
                        }
                    } else {
                        // Hide all carousel items initially
                        for (var i = 0; i < drinkItems.length; i++) {
                            drinkItems[i].style.display = 'none';
                        }

                        // Populate the search results and show relevant carousel items
                        data.forEach(item => {
                            var li = document.createElement('li');
                            li.appendChild(document.createTextNode(item.name));
                            ul.appendChild(li);

                            for (var i = 0; i < drinkItems.length; i++) {
                                name = drinkItems[i].querySelector('h3');
                                txtValue = name.textContent || name.innerText;
                                if (txtValue.toUpperCase() === item.name.toUpperCase()) {
                                    drinkItems[i].style.display = 'block';
                                }
                            }
                        });
                    }
                })
                .catch(error => console.error('Error:', error));
        }
    </script>

    <div class="carousel">
        @{
            int i = 0;
            foreach (var drink in Model)
            {
                <div class="carousel-item">
                    <div class="image-container">
                        <img src="@Url.Content("~/images/" + drink.name + ".jpg")" alt="@drink.name" class="carousel-image" />
                    </div>
                    <!-- Modalni prozor za uređivanje -->
                    <div id="modal-@drink.id" class="modal">
                        <div class="modal-content">
                            <h1>Edit Drink</h1>
                            <form method="post" asp-action="Edit" asp-route-id="@drink.id">
                                <img src="@Url.Content("~/images/" + drink.name + ".jpg")" alt="@drink.name" class="edit-image" />
                                <div class="form-group">
                                    <label for="name">Name:</label>
                                    <input type="text" id="name" name="name" value="@drink.name" />
                                </div>
                                <div class="form-group">
                                    <label for="price">Price:</label>
                                    <!-- Promijenjeno na type="text" kako bismo omogućili unos bilo koje vrijednosti -->
                                    <input type="text" id="price" name="price" value="@drink.price" />
                                </div>
                                <div class="form-group">
                                    <input type="submit" value="Save" />
                                </div>
                            </form>
                        </div>
                    </div>
                    <h3>@drink.name</h3>
                    <p>Price: @drink.price</p>
                    <p>Price with PDV: @ViewBag.PricesWithPDV[i] </p>

                    <div class="quantity" style="text-align: center;">
                        <button class="minus-btn" data-drink-id="@drink.id">-</button>
                        <!-- Dodan pattern attribut kako bi se ograničilo na unos samo decimalnih brojeva -->
                        <input type="text" class="quantity-input" value="0" pattern="\d+(\.\d{1,2})?" />
                        <button class="plus-btn" data-drink-id="@drink.id">+</button>
                    </div>
                </div>
                i++;
            }
        }
    </div>

    <script>
        document.addEventListener('DOMContentLoaded', function () {
            const quantityElements = document.querySelectorAll('.quantity');

            quantityElements.forEach(function (element) {
                const minusBtn = element.querySelector('.minus-btn');
                const plusBtn = element.querySelector('.plus-btn');
                const quantityInput = element.querySelector('input.quantity-input');

                minusBtn.addEventListener('click', function () {
                    updateQuantity(0);
                });

                plusBtn.addEventListener('click', function () {
                    updateQuantity(0.5);
                });

                function updateQuantity(change) {
                    let quantity = parseFloat(quantityInput.value);
                    quantity += change;

                    if (quantity < 0) {
                        quantity = 0;
                    }

                    quantityInput.value = quantity.toFixed(2);
                }
            });

            function getDrinkNameById(drinkId) {
                const drinks = @Html.Raw(Json.Serialize(Model));
                const drink = drinks.find(d => d.id === drinkId);
                return drink ? drink.name : 'Nepoznato';
            }

            // Dodano za postavljanje event listenera za sve forme
            document.querySelectorAll('form').forEach(form => {
                form.addEventListener('submit', function (e) {
                    const priceInput = form.querySelector('#price');
                    const priceValue = parseFloat(priceInput.value);

                    if (priceValue < 2 || priceValue > 50) {
                        e.preventDefault(); // Spriječava podnošenje forme
                        alert('Upozorenje: Cijena mora biti između 2 i 50');
                    } else {
                        // Slanje forme na server ako je unos ispravan
                        form.submit();
                    }
                });
            });
        });
    </script>


    <script>
        // JavaScript kod za modalni prozor
        var modalItems = document.getElementsByClassName("image-container");
        var modals = document.getElementsByClassName("modal");

        // Prikazuje modalni prozor za određenu stavku
        function showModal(itemIndex) {
            modals[itemIndex].style.display = "block";
        }

        // Postavlja događaje za prikazivanje/skrivanje modalnih prozora
        for (var i = 0; i < modalItems.length; i++) {
            (function (index) {
                modalItems[index].addEventListener("click", function () {
                    showModal(index);
                });

                var closeButtons = modals[index].getElementsByClassName("close");
                for (var j = 0; j < closeButtons.length; j++) {
                    closeButtons[j].addEventListener("click", function () {
                        hideModal(index);
                    });
                }

                // Sakriva modalni prozor za određenu stavku
                function hideModal(itemIndex) {
                    modals[itemIndex].style.display = "none";
                }
            })(i);
        }
    </script>

    <div class="dailyProfit">
        <div class="box">
            <div class="subtitle">Daily Profit</div>
            <div id="daily-profit-label" class="daily-profit-value"></div>
        </div>
        <div id="optimal-profit-message" class="optimal-profit-message"></div>
        <button id="daily-profit-btn" type="button" onclick="calculateDailyProfit()">Check Daily Profit</button>
    </div>

    <script>
        function calculateDailyProfit() {
            const selectedDrinks = [];
            const quantityInputs = document.querySelectorAll('.quantity-input');

            quantityInputs.forEach(function (input) {
                const quantity = parseInt(input.value);
                const drinkId = input.parentElement.querySelector('.minus-btn').getAttribute('data-drink-id');
                if (quantity > 0) {
                    selectedDrinks.push({ drinkId: parseInt(drinkId), quantity: quantity });
                }
            });

            fetch('@Url.Action("CalculateDailyProfit", "AdminPanel")', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json'
                },
                body: JSON.stringify(selectedDrinks)
            })
                .then(response => response.json())
                .then(data => {
                    console.log('Parsed values:', data.item1, data.item2); // Log the parsed values for debugging

                    // Display the daily profit on the page
                    const dailyProfitLabel = document.getElementById('daily-profit-label');
                    const optimalProfitMessageLabel = document.getElementById('optimal-profit-message');

                    if (data.item1 !== undefined && data.item2 !== undefined) {
                        const dailyProfit = parseFloat(data.item1);
                        const message = data.item2;

                        dailyProfitLabel.innerText = `${dailyProfit}`;
                        optimalProfitMessageLabel.innerText = message; // Display the optimal profit message
                    } else {
                        dailyProfitLabel.innerText = "0";
                        optimalProfitMessageLabel.innerText = "";
                    }

                    dailyProfitLabel.style.display = 'block';
                    optimalProfitMessageLabel.style.display = 'block';
                })
                .catch(error => console.error('Error:', error));
        }
    </script>


    <script>
        document.addEventListener('DOMContentLoaded', function () {
            const quantityElements = document.querySelectorAll('.quantity');

            quantityElements.forEach(function (element) {
                const minusBtn = element.querySelector('.minus-btn');
                const plusBtn = element.querySelector('.plus-btn');
                const quantityInput = element.querySelector('input.quantity-input');

                minusBtn.addEventListener('click', function () {
                    updateQuantity(-1);
                });

                plusBtn.addEventListener('click', function () {
                    updateQuantity(1);
                });

                function updateQuantity(change) {
                    let quantity = parseInt(quantityInput.value);
                    quantity += change;

                    if (quantity < 0) {
                        quantity = 0;
                    }

                    quantityInput.value = quantity;
                }
            });

            function getDrinkNameById(drinkId) {
                const drinks = @Html.Raw(Json.Serialize(Model));
                const drink = drinks.find(d => d.id === drinkId);
                return drink ? drink.name : 'Nepoznato';
            }
        });
    </script>

    <h3>@ViewBag.OptimalProfit</h3>
    <br />
    <div class="team-heading">Team Members</div>
    <div class="team-grid">
        <div class="team-member">
            <img src="@Url.Content("~/images/eminaEfendicProfilna.jpg")" alt="Uposlenik 1" />
            <div class="member-name">Emina Efendić</div>
        </div>
        <div class="team-member">
            <img src="@Url.Content("~/images/aminaHromicProfilna.jpg")" alt="Uposlenik 2" />
            <div class="member-name">Amina Hromić</div>
        </div>
        <div class="team-member">
            <img src="@Url.Content("~/images/hanaMahmutovicProfilna.jpg")" alt="Uposlenik 3" />
            <div class="member-name">Hana Mahmutović</div>
        </div>
        <div class="team-member">
            <img src="@Url.Content("~/images/tajraSelimovicProfilna.jpg")" alt="Uposlenik 4" />
            <div class="member-name">Tajra Selimović</div>
        </div>
    </div>

</body>
</html>